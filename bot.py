import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup

from config import API_TOKEN, number, QIWI_SEC_TOKEN, admin, admin_name
import modules.keyboard as kb
import modules.functions as fc

import sqlite3
from qiwipyapi import Wallet

storage = MemoryStorage()
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)

connection = sqlite3.connect('data.db')
q = connection.cursor()
q.execute(
	'CREATE TABLE IF NOT EXISTS users (user_id integer, bd text, donated int, name text);')
connection.commit()

wallet_p2p = Wallet(number, p2p_sec_key=QIWI_SEC_TOKEN)

class don(StatesGroup):
	name = State()
	cost = State()
	anon = State()
	rasst = State()

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
	await fc.first(message.from_user.id)
	if message.from_user.id == admin:
		await message.answer("–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å —Ç—Å'—É\n–ú–æ–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ - https://github.com/l1v0n1/donation-bot-telegram\n\n–î–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É –≤–≤–µ–¥–∏—Ç–µ: /admin", reply_markup=kb.menu)
	else:
		await message.answer("–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å —Ç—Å'—É\n–ú–æ–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ - https://github.com/l1v0n1/donation-bot-telegram", reply_markup=kb.menu)

@dp.message_handler(commands=['admin'])
async def adminstration(message: types.Message):
	if message.from_user.id == admin:
		await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.', reply_markup=kb.apanel)
	else:
		await message.answer('–ß–µ—Ä—Ç! –¢—ã –º–µ–Ω—è –≤–∑–ª–æ–º–∞–ª :(')

@dp.message_handler(content_types=['text'], text='ü§ë –¢–æ–ø –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤')
async def donatorstop(message: types.Message):
	q.execute(f"SELECT user_id, donated, name FROM users order by donated desc")
	response = q.fetchall()
	top_list = []
	for id, amount, name in response:
		if name != None:
			donator = f"[{name}](tg://user?id={id})"
		else:
			donator = '–ê–Ω–æ–Ω–∏–º'
		if amount != None:
			top_list.append("--------------\n–î–æ–Ω–∞—Ç–µ—Ä: {}\n–ó–∞–¥–æ–Ω–∞—Ç–∏–ª: {}‚ÇΩ".format(donator, amount))
		else:
			pass
	msg = '\n'.join(top_list)
	await message.answer('–¢–æ–ø –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤:\n{}'.format(msg), parse_mode='Markdown')

@dp.message_handler(content_types=['text'], text='üí∏ –ó–∞–¥–æ–Ω–∞—Ç–∏—Ç—å')
async def donation(message: types.Message, state: FSMContext):
	await message.answer('–ñ–µ–ª–∞–µ—Ç–µ –∫–∞–∫-—Ç–æ –Ω–∞–∑–≤–∞—Ç—å—Å—è? –ï—Å–ª–∏ –¥–∞, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –∫–∞–∫ –≤–∞—Å –∑–≤–∞—Ç—å...\n–ï—Å–ª–∏ –∂–µ –∂–µ–ª–∞–µ—Ç–µ –æ—Å—Ç–∞—Ç—å—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É', reply_markup=kb.choice)
	await don.name.set()

@dp.message_handler(state=don.name)
async def donation_name(message: types.Message, state: FSMContext):
	if message.text == '–û—Ç–º–µ–Ω–∞':
		await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥.', reply_markup=kb.menu)
		await state.finish()
	elif message.text == '–ê–Ω–æ–Ω–∏–º–Ω—ã–π –¥–æ–Ω–∞—Ç':
		await message.answer('–•–æ—Ä–æ—à–æ, –≤—ã –æ—Å—Ç–∞–Ω–µ—Ç–µ—Å—å –∞–Ω–æ–Ω–∏–º–Ω—ã–º.\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å..', reply_markup=kb.back)
		await don.anon.set()
	else:
		res = q.execute("SELECT name FROM users WHERE lower(name) LIKE lower(?)", [message.text.lower()]).fetchall()
		if len(res) == 0:
			if len(message.text) <= 20:
				if not message.text.startswith('/'):
					q.execute('UPDATE users SET name = ? WHERE user_id = ?', (message.text.lower(), message.from_user.id))
					connection.commit()
					await message.answer('–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å..', reply_markup=kb.back)
					await don.cost.set()
				else:
					await message.answer('–í—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã, –≤–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è')
			else:
				await message.answer('–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –∏–º—è –∫–æ—Ä–æ—á–µ, –¥–æ 20 —Å–∏–º–≤–æ–ª–æ–≤..')
		else:
			await message.answer('–î–∞–Ω–Ω–æ–µ –∏–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.')



@dp.message_handler(state=don.anon)
async def donation_anonimous(message: types.Message, state: FSMContext):
	if message.text == '–û—Ç–º–µ–Ω–∞':
		await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥.', reply_markup=kb.menu)
		await state.finish()
	else:
		if message.text.isdigit():
			link = await fc.pay(message.from_user.id, message.text)
			keyboard = await kb.buy(link)
			await message.answer('...', reply_markup=kb.menu)
			await message.answer(f'–°—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤—ã—Å—Ç–∞–≤–ª–µ–Ω, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã', reply_markup=keyboard)
			await state.finish()
		else:
			await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ! –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å.')

@dp.message_handler(state=don.cost)
async def donation_process(message: types.Message, state: FSMContext):
	if message.text == '–û—Ç–º–µ–Ω–∞':
		await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –Ω–∞–∑–∞–¥.', reply_markup=kb.menu)
		await state.finish()
	else:
		if message.text.isdigit():
			link = await fc.pay(message.from_user.id, message.text)
			keyboard = await kb.buy(link)
			await message.answer('...', reply_markup=kb.menu)
			await message.answer(f'–°—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤—ã—Å—Ç–∞–≤–ª–µ–Ω, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã', reply_markup=keyboard)
			await state.finish()
		else:
			await message.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ! –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å.')

@dp.callback_query_handler(lambda call: call.data == 'check')
async def checkpay(call):
	try:
		re = q.execute(f"SELECT bd FROM users WHERE user_id = ?", (call.message.from_user.id, )).fetchone()
		status = wallet_p2p.invoice_status(bill_id=re[0])
		a = status['status']['value']
		am = status['amount']['value']
		amount = int(float(am))
		if a == 'WAITING':
			await call.message.answer('–û—à–∏–±–∫–∞! –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
		elif a == 'PAID':
			q.execute('UPDATE users SET bd = 0 WHERE user_id = ?', (call.message.from_user.id, ))
			connection.commit()
			q.execute('UPDATE users SET donated = ? WHERE user_id = ?', (amount, call.message.from_user.id))
			connection.commit()
			await call.message.answer('–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–π–¥–µ–Ω–∞, –±–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!\n–í—ã –±—É–¥–µ—Ç–µ –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ —Ç–æ–ø –¥–æ–Ω–∞—Ç–µ—Ä–æ–≤.')
			await bot.send_message(admin, '–ù–æ–≤—ã–π –¥–æ–Ω–∞—Ç!\n–î–æ–Ω–∞—Ç–µ—Ä: {}\nID: {}\n–°—É–º–º–∞: {}‚ÇΩ\n'.format(call.message.from_user.mention, call.message.from_user.id, amount))
		elif a == 'EXPIRED':
			q.execute(f'UPDATE users SET bd = 0 WHERE user_id = ?', (call.message.from_user.id, ))
			connection.commit()
			await call.message.answer('–í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å—á–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ. –°—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω', reply_markup=kb.menu)
		elif a == 'REJECTED':
			q.execute(f'UPDATE users SET bd = 0 WHERE user_id = ?', (call.message.from_user.id, ))
			connection.commit()
			await call.message.answer('–°—á–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω', reply_markup=kb.menu)
		elif a == 'UNPAID':
			q.execute(f'UPDATE users SET bd = 0 WHERE user_id = ?', (call.message.from_user.id, ))
			connection.commit()
			await call.message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã. –°—á–µ—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω', reply_markup=kb.menu)
	except Exception as err:
		await call.message.answer('–û—à–∏–±–∫–∞!')

@dp.callback_query_handler(lambda call: call.data == 'cancel')
async def back(call):
	try:
		billid = q.execute('SELECT bd FROM users WHERE user_id = ?', (call.message.from_user.id, )).fetchone()
		connection.commit()
		wallet_p2p.cancel_invoice(bill_id=billid[0])
		q.execute('UPDATE users SET bd = 0 WHERE user_id = ?', (call.message.from_user.id, ))
		connection.commit()
		await call.message.answer('–•–æ—Ä–æ—à–æ, –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã...', reply_markup=kb.menu)
	except Exception as err:
		await call.message.answer('–û—à–∏–±–∫–∞!')

@dp.callback_query_handler(lambda call: call.data == 'rass')    
async def usender(call):
	await call.message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá', reply_markup=kb.back)
	await don.rasst.set()

@dp.message_handler(state=don.rasst)
async def process_sedning(message: types.Message, state: FSMContext):
	q.execute(f'SELECT user_id FROM users')
	row = q.fetchall()
	connection.commit()
	if message.text == '–û—Ç–º–µ–Ω–∞':
		await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=kb.menu)
		await state.finish()
	else:
		info = row
		await message.answer('–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...')
		for i in range(len(info)):
			try:
				await bot.send_message(info[i][0], str(message.text))
			except:
				pass
		await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.', reply_markup=kb.menu)
		await state.finish()

@dp.callback_query_handler(lambda call: call.data =='stats')
async def statistics(call):
	re = q.execute(f'SELECT * FROM users').fetchall()
	kol = len(re)
	connection.commit()
	await call.message.answer(f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {kol}')

if __name__ == '__main__':
	executor.start_polling(dp, skip_updates=True)